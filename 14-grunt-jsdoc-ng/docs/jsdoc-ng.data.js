!function(){angular.module("jsDocNG-Data",[]).constant("$title","Automatically create beautiful html documentation from your source code documentation (v. 0.0.1)").constant("$readme",'<h2><a href="http://grunt-tasks.com/grunt-jsdoc/" title="grunt jsdoc">Blog post</a></h2><p>Grunt jsdoc is an awesome grunt plugin that allows you to create documentation automatically from your javascript source code in your build process itself.</p>\n<blockquote>\n<p>We will be using the beta version of grunt jsdoc as it uses jsdoc@3.3.0 and doesn\'t require Rhino dependency</p>\n</blockquote>\n<p>jsdoc is a javascript documentation generation framework used to build custom documentation based on your source code comments. Using its block tags you can have a beautiful documentation of your code/API.\nBy making use of grunt jsdoc you are removing the work of maintaining your code documentation. It is extremely important to keep your source code documented and an easy to use API.</p>\n<p>For more information on how to use jsdoc please visit <a href="http://usejsdoc.org/" title="jsdoc">jsdoc</a></p>\n<p>To install grunt-jsdoc:</p>\n<p><code>npm install grunt-jsdoc@beta --save-dev</code></p>\n<p>Lets consider a simple javascript file area.js which can create a new area object.\nIt has got getters like fetching its width, its height, its total area and setters for setting its width or height.</p>\n<p><img src="https://camo.githubusercontent.com/415148aecc6dac2e5ebb12b7f7584f4a8744eca4/687474703a2f2f73706164676f732e6769746875622e696f2f7375626c696d652d6a73646f63732f696d616765732f66756e6374696f6e2d74656d706c6174652e676966" alt="sublime-jsdoc" title="sublime-jsdoc"></p>\n<p>Heres the source code for area.js:</p>\n<blockquote>\n<p>If you are using sublime then theres an awesome <a href="https://github.com/spadgos/sublime-jsdocs">plugin</a> to create comments for your code:</p>\n</blockquote>\n<pre class="prettyprint source lang-js"><code>(function () {\n  &quot;use strict&quot;;\n  /**\n   * Creates a new geometrical Area Block\n   * @param {int} width  the width of the area\n   * @param {int} height the height of the area\n   */\n  function Area(width, height) {\n    this.width = width;\n    this.height = height;\n\n    /**\n     * Returns the width of the area\n     * @return {int}      the width of the area\n     */\n    this.getWidth = function() {\n      return this.width;\n    };\n\n    /**\n     * Returns the height of the area\n     * @return {int}      the height of the area\n     */\n    this.getHeight = function() {\n      return this.height;\n    };\n\n    /**\n     * Returns the 2D area of the object\n     * @return {int} height x width\n     */\n    this.getTotalArea = function() {\n      return this.height * this.width;\n    };\n\n    /**\n     * Returns whether height or width is greater\n     * @return {string}\n     */\n    this.getGreater = function() {\n      var greater = this.height > this.width ? &quot;height&quot; : &quot;width&quot;;\n      return greater;\n    };\n\n    /**\n     * Changes the Height of the area\n     * @param {int} ht new height\n     */\n    this.setHeight = function(ht) {\n      this.height = ht;\n      return ht;\n    };\n\n    /**\n     * Changes the Width of the area\n     * @param {int} wd new width\n     */\n    this.setWidth = function(wd) {\n      this.width = wd;\n      return wd;\n    };\n  }\n})();</code></pre>').constant("$doclets",[{kind:"class",name:"Area",longname:"Area",scope:"global",$href:"Area",$id:"T000002R000002"},{description:"Width of the area",type:{names:["int"]},name:"width",longname:"Area#width",kind:"member",memberof:"Area",scope:"instance",$href:"Area#width",$id:"T000002R000003"},{description:"Height of the area",type:{names:["int"]},name:"height",longname:"Area#height",kind:"member",memberof:"Area",scope:"instance",$href:"Area#height",$id:"T000002R000004"},{description:"Returns the width of the area",returns:[{type:{names:["int"]},description:"the width of the area"}],name:"getWidth",longname:"Area#getWidth",kind:"function",memberof:"Area",scope:"instance",$href:"Area#getWidth",$id:"T000002R000005"},{description:"Returns the height of the area",returns:[{type:{names:["int"]},description:"the height of the area"}],name:"getHeight",longname:"Area#getHeight",kind:"function",memberof:"Area",scope:"instance",$href:"Area#getHeight",$id:"T000002R000006"},{description:"Returns the 2D area of the object",returns:[{type:{names:["int"]},description:"height x width"}],name:"getTotalArea",longname:"Area#getTotalArea",kind:"function",memberof:"Area",scope:"instance",$href:"Area#getTotalArea",$id:"T000002R000007"},{description:"Returns whether height or width is greater",returns:[{type:{names:["string"]}}],name:"getGreater",longname:"Area#getGreater",kind:"function",memberof:"Area",scope:"instance",$href:"Area#getGreater",$id:"T000002R000008"},{description:"Changes the Height of the area",params:[{type:{names:["int"]},description:"new height",name:"ht"}],name:"setHeight",longname:"Area#setHeight",kind:"function",memberof:"Area",scope:"instance",$href:"Area#setHeight",$id:"T000002R000010"},{description:"Changes the Width of the area",params:[{type:{names:["int"]},description:"new width",name:"wd"}],name:"setWidth",longname:"Area#setWidth",kind:"function",memberof:"Area",scope:"instance",$href:"Area#setWidth",$id:"T000002R000012"}])}();